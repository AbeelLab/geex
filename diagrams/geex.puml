@startuml
class App extends javafx.application.Application {
    {static} # FRAME_WIDTH : int
    {static} # FRAME_HEIGHT : int

    {static} +main(args : String...)
}

class DrawableEdge extends javafx.scene.shape.Line
class DrawableNode {
    # currentIncoming : int
    # translateX : SimpleDoubleProperty
    # translateY : SimpleDoubleProperty

    +incrementIncoming() : int
}
class BaseController<StackPane> extends DefaultController {
    # sequence : String
}
abstract class DefaultController<T extends Parent> implements javafx.fxml.Initializable {
    # root : T
    #loadFXML(fxmlFile : String)
    #loadFile(fileChooser : FileChooser, source : TextField)
    #getRoot() : Parent
}
abstract class ViewController<T extends Parent> extends DefaultController {
    +getBreadcrumbName() : String
}
class GraphController<AnchorPane> extends ViewController {
    # mainController : MainController
    # nwkFile : File
}
class MainController<BorderPane> extends DefaultController {
    # viewList : Stack<Node>

    +setBaseView(node : Node)
    +setView(node : Node)
    +previousView()
    +exitProgram()
}
class MenuController extends javafx.scene.control.MenuBar {
    # mainController : MainController

    +initFileMenu()
    +initHelpMenu()
    -initWorkspaceMenu()
}
class NewickController<ScrollPane> extends ViewController {
    # mainController : MainController
    # loadNewickService : LoadNewickService

    +loadTree()
    #showTree(tree : Tree)
}

class graph.GraphFactory {
    ...
}

class newick.TreeFactory {
    ...
}

class LoadGraphService<Graph> extends javafx.concurrent.Service {
    # nodeFile : File
    # edgeFile : File
}
class LoadNewickService<Tree> extends javafx.concurrent.Service {
    # nwkFile : File
}

class Workspace {
    directory : File
    files : File[]
    edgeFile : File
    nodeFile : File
    nwkFile : File

    -findFile(files : File[], extension : String)
}

'FXML
class base << (F,orange) FXML >> {
    + sources : Text
    + bases : Text
    + occurrences : Text
}
class graph << (F,orange) FXML >> {
    + progressIndicator : ProgressIndicator
    + sequences : Group
}
class main << (F,orange) FXML >> {
    + view : StackPane
    + main : BorderPane
}
class newick << (F,orange) FXML >> {
    + newick : Group
    + progressIndicator : ProgressIndicator
}
class footer << (F,orange) FXML >> {
    + message : Text
}

'Relations
BaseController "1" *-- "1" base
GraphController "1" *-- "1" graph
MainController "1" *-- "1" main
NewickController "1" *-- "1" newick
MessageController "1" *-- "1" footer

App "1" *-- "1" MainController
MainController o-- LoadGraphController
MainController o-- LoadNewickController
MainController o-- MenuController

LoadNewickController o-- NewickController
LoadGraphController o-- GraphController

NewickController -- LoadNewickService
NewickController -- DrawableEdge

GraphController ..> BaseController
GraphController -- DrawableEdge
GraphController -- LoadGraphService

LoadGraphService ..> graph.GraphFactory
LoadNewickService ..> newick.TreeFactory

MainController ..> Workspace
Workspace ..> Finder

'External classes
abstract class javafx.concurrent.Service<V> {
    +createTask() : Task<V>
}

abstract class javafx.application.Application {
    +start(stage : Stage)
}

class org.jgrapht.graph.DefaultDirectedGraph<E, V>

interface javafx.fxml.Initializable {
    +initialize(location : URL, resources : ResourceBundle)
}
@enduml
