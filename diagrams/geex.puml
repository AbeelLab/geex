@startuml
class App extends javafx.application.Application {
    {static} # FRAME_WIDTH : int
    {static} # FRAME_HEIGHT : int

    {static} +main(args : String...)
}

class DrawableEdge extends javafx.scene.shape.Line
class BaseLabel extends javafx.scene.shape.Rectangle {
    {static}+BASE_HEIGHT : int
}
class InfoLabel extends javafx.scene.layout.VBox {
    node : Node
    {static}+LABEL_WIDTH : int

    +init()
    -initMainLabel() : Label
    -initBaseLabels() : Group
}
class NewickLabel extends javafx.scene.control.Label {
    node : Node

    +setEvents()
    +setSelectedClass(oldValue : Selection, newValue : Selection)
}

abstract class DefaultController<T extends Parent> implements javafx.fxml.Initializable {
    # root : T
    #loadFXML(fxmlFile : String)
    #loadFile(fileChooser : FileChooser, source : TextField)
    #getRoot() : Parent
}
abstract class ViewController<T extends Parent> extends DefaultController {
    +{abstract}getBreadcrumbName() : String
    +{abstract}activate()
    +{abstract}deactivate()
}
class GraphController<AnchorPane> extends ViewController {
    mainController : MainController
    sources : Set<String>
    graphMapIn : ReadOnlyObjectProperty<GraphMap>
    annatationMapIn : ReadOnlyObjectProperty<AnnotationMap>

    -loadGraph()
    -loadAnnotation()
    -showGraph(graph : Graph)
    -initOnTheFlyLoading(nodeList : List<InfoLabel>)
    -showCurrentLabels(map : Map<Integer, List<InfoLabel>>)
}
class MainController<Stackpane> extends DefaultController {
    viewList : ObservableList<ViewController>
    -workspace : Workspace
    messageController : MessageController
    overlayController : OverlayController
    newickLifted : boolean
    menuController : MenuController
    lastTopView : ViewController

    +toggleOverlay()
    +setBaseView(viewController : ViewController)
    +setView(on : ViewController, viewController : ViewController)
    +previousView()
    +toView(viewController : ViewController)
    +topView() : ViewController
    +activateView()
    +toggleNewick()
    +exitProgram()
    +getWorkspace() : Workspace
    +getMenuController() : MenuController
    +setWorkspace(workspace : Workspace)
    +displayMessage(text : String)
}
class BaseController<ScrollPane> extends ViewController {
    -graph : Graph
    -node : Node
}
class MessageController<VBox> extends DefaultController {
    +displayMessage(text : String)
}
class MenuController {
    mainController : MainController
    menuBar : MenuBar
    loadGenomeGraph : MenuItem

    +initFileMenu()
    +initNavigateMenu()
    +initHelpMenu()

    +getLoadGenomeGraph() : MenuItem
}
class NewickController<ScrollPane> extends ViewController {
    mainController : MainController
    graphController : GraphController
    newickIn : ReadOnlyObjectProperty<Newick>
    newickObjectProperty : ObjectProperty<Newick>
    menuItem : MenuItem
    newick : Newick

    #showTree(newick : Newick)
    #loadGraph(newick : Newick)
}
class WelcomeController<GridPane> extends ViewController {
    -mainController : MainController
}
class OverlayController<GridPane> extends DefaultController

class LoadService<T> extends javafx.concurrent.Service {
    -parserClass : Class<? extends Parser<T>>
    -files : File[]
}
abstract class model.Parser<T> {
    +parse() : T
    +setReader(readerList : BufferedReader...)
}

class Workspace {
    directory : File
    loadNewickService : LoadService<Newick>
    loadGraphService : LoadService<GraphMap>
    loadAnnotationService : LoadService<AnnotationMap>

    +load()
    +preload()

    +{static}chooseWorkspace(mainController : MainController)
}

'FXML
class base << (F,orange) FXML >> {
    + sources : Text
    + bases : Text
    + occurrences : Text
}
class graph << (F,orange) FXML >> {
    + progressIndicator : ProgressIndicator
    + sequences : Group
    + scroll : ScrollPane
}
class main << (F,orange) FXML >> {
    + view : StackPane
    + overlay : StackPane
    + menu : MenuBar
    + main : BorderPane
}
class newick << (F,orange) FXML >> {
    + newick : Group
    + progressIndicator : ProgressIndicator
}
class footer << (F,orange) FXML >> {
    + message : Text
}
class welcome << (F,orange) FXML >> {
    + load : Button
}
class overlay << (F,orange) FXML >>

'Relations
BaseController "1" *-- "1" base
GraphController "1" *-- "1" graph
MainController "1" *-- "1" main
NewickController "1" *-- "1" newick
MessageController "1" *-- "1" footer
WelcomeController "1" *-- "1" welcome
OverlayController "1" *-- "1" overlay

App "1" *-- "1" MainController
MainController o-- MenuController
MainController o-- MessageController
MainController o-- OverlayController
MainController --> WelcomeController

NewickController ..> DrawableEdge
NewickController ..> NewickLabel

GraphController ..> InfoLabel
GraphController ..> DrawableEdge

LoadService ..> model.Parser

InfoLabel ..> BaseLabel
InfoLabel --> BaseController

MainController ..> Workspace

WelcomeController --> NewickController

Workspace ..> LoadService

'External classes
abstract class javafx.concurrent.Service<V> {
    -value : ReadOnlyObjectProperty<V>
    +createTask() : Task<V>
}

abstract class javafx.application.Application {
    +start(stage : Stage)
}

interface javafx.fxml.Initializable {
    +initialize(location : URL, resources : ResourceBundle)
}
@enduml
