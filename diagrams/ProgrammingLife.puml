@startuml
class App {
    {static} # FRAME_WIDTH : int
    {static} # FRAME_HEIGHT : int

    {static} +main(args : String...)
}

class DrawableEdge extends javafx.scene.shape.Line
class DrawableNode {
    # currentIncoming : int
    # translateX : SimpleDoubleProperty
    # translateY : SimpleDoubleProperty

    +incrementIncoming() : int
}

abstract class DefaultController<T extends Parent> {
    # root : T
    #loadFXML(fxmlFile : String)
    #getRoot() : Parent
}

class MainController<BorderPane> extends DefaultController implements javafx.fxml.Initializable {
    # @FXML progressIndicator : ProgressIndicator
    # @FXML sequences : Group
}

class LoadGraphController<GridPane> Extends DefaultController implements javafx.fxml.Initializable {
    # @FXML loadNodes : Button
    # @FXML loadEdges : Button
    # @FXML loadNewick : Button
    # @FXML load : Button
    # @FXML treeload : Button
    # @FXML nodeSource : TextField
    # @FXML edgeSource : TextField
    # @FXML nwkSource : TextField
    # loadGraphService : LoadGraphService
    # loadTreeService : LoadTreeService
    # progressIndicator : ProgressIndicator
    # sequences : Group

    +LoadGraphController(progressIndicator : ProgressIndicator, sequences : Group)
    #loadFile(fileChooser : FileChooser, source TextField) : File
    #loadGraph()
    #loadTree()
    #showGraph(graph : Graph)
    #showColumn(graph : Graph, nodes List<Node>, int column)
    #showTree(tree : Tree)
    #printTree(node : TreeNode, prev_w : double)
    #showNodes(nodes : List<Node>, column : int)
}


class Node extends DrawableNode {
    # id : int
    # sources : Set<String>
    # refStartPosition : int
    # refEndPosition : int
    # content : String
}
class NodeFactory {
    #getNodeId(sc : Scanner) : int
    +getNode(sc : Scanner) : Node
}

class Graph<Node, DefaultEdge> extends org.jgrapht.graph.DefaultDirectedGraph {
    +getFirstNode()
}
class GraphFactory {
    #parseNodes(nodeFile : File, graph : Graph) : List<Node>
    #parseEdges(edgeFile : File, graph : Graph, nodeList : List<Node>)
    +getGraph(nodeFile : File, edgeFile : File) : Graph
}

class LoadGraphService<Graph> extends javafx.concurrent.Service {
    # nodeFile : File
    # edgeFile : File
}
class LoadTreeService<Tree> extends javafx.concurrent.Service {
    # nwkFile : File
}

GraphFactory ..> Graph : << create >>
GraphFactory ..> NodeFactory

NodeFactory ..> Node : << create >>

App "1" *-- "1" MainController
MainController o-- LoadGraphController

LoadGraphController "1" o-- "0..*" DrawableEdge
LoadGraphController "1" -- "1" LoadGraphService
LoadGraphController "1" -- "1" LoadTreeService

LoadGraphService ..> GraphFactory
@enduml
