@startuml
class App extends javafx.application.Application {
    {static} # FRAME_WIDTH : int
    {static} # FRAME_HEIGHT : int

    {static} +main(args : String...)
}

class DrawableEdge extends javafx.scene.shape.Line
class BaseLabel extends javafx.scene.shape.Rectangle {
    {static}+BASE_HEIGHT : int
}
abstract class DefaultLabel extends javafx.scene.layout.VBox {
    +init()
    +currentColumn() : int
}
class InfoLabel extends DefaultLabel {
    node : Node
    {static}+LABEL_WIDTH : int

    +init()
    -initMainLabel() : Label
    -initBaseLabels() : Group
}
class NewickLabel extends javafx.scene.control.Label {
    node : Node

    +setEvents()
    +setSelectedClass(oldValue : Selection, newValue : Selection)
}

abstract class DefaultController<T extends Parent> implements javafx.fxml.Initializable {
    root : T
    -visibilityProperty : BooleanProperty
    #loadFXML(fxmlFile : String)
    +getRoot() : Parent
}
abstract class ViewController<T extends Parent> extends DefaultController {
    +{abstract}getBreadcrumbName() : String
    +{abstract}activate()
    +{abstract}deactivate()
}
abstract class DefaultGraphController<AnchorPane> extends ViewController {
    mainController : MainController

    +getGraphList() : LinkedList<StackGraph>
    #showGraph(drawableGraph : DrawableGraph)
    -initOnTheFlyLoading(nodeList : List<InfoLabel>)
    -showCurrentLabels(map : Map<Integer, List<InfoLabel>>)
}
class GraphController extends DefaultGraphController {
    sources : Set<String>
    selectedSources : Set<String>
    selectNewickController : SelectNewickController

    -initMenu()
    -loadGraph(graphMap : GraphMap)
    -loadAnnotation(codingSequenceMap : AnnotationMap)
    -loadResistance(resistanceMap : ResistanceMap)
    +updateSelectedSources(sources : Set<String>)

}
class MainController<Stackpane> extends DefaultController {
    viewList : ObservableList<ViewController>
    -workspace : Workspace
    messageController : MessageController
    overlayController : OverlayController
    newickLifted : boolean
    menuController : MenuController
    lastTopView : ViewController

    +toggleOverlay()
    +setBaseView(viewController : ViewController)
    +setView(on : ViewController, viewController : ViewController)
    +previousView()
    +toView(viewController : ViewController)
    +topView() : ViewController
    +activateView()
    +toggleNewick()
    +exitProgram()
    +displayMessage(text : String)
}
class BaseController<ScrollPane> extends ViewController {
    -graph : Graph
    -node : Node
}
class MessageController<VBox> extends DefaultController {
    +displayMessage(text : String)
}
class MenuController {
    mainController : MainController
    menuBar : MenuBar
    loadGenomeGraph : MenuItem
    toggleOverlay : MenuItem
    toggleSelect : MenuItem
    zoomIn : MenuItem
    zoomOut : MenuItem
    welcomeMenuItem : MenuItem

    +initFileMenu()
    +initNavigateMenu()
    +initHelpMenu()

    -createMenu(title : String, menuItems : MenuItem...) : Menu
    -createMenuItem(
}
abstract class DefaultNewickController<ScrollPane> extends ViewController {
    #showTree(newick : Newick)
}
class NewickController extends DefaultNewickController {
    mainController : MainController
    selection : Set<String>
    graphController : GraphController

    #loadGraph(newick : Newick)
}
class WelcomeController<GridPane> extends ViewController {
    -mainController : MainController
}
class OverlayController<GridPane> extends DefaultController
class SelectNewickController extends DefaultNewickController {
    -graphController : GraphController
}
class SubGraphController extends DefaultGraphController {
    stackGraph : StackGraph
    graphNode : GraphNode
}

class LoadService<T> extends javafx.concurrent.Service {
    -parserClass : Class<? extends Parser<T>>
    -files : File[]
}
abstract class model.Parser<T> {
    +parse() : T
    +setReader(readerList : BufferedReader...)
}

class Workspace {
    directory : File
    loadNewickService : LoadService<Newick>
    loadGraphService : LoadService<GraphMap>
    loadAnnotationService : LoadService<AnnotationMap>

    -findFile(files : File[], extension : String) : File
    +save()
    +load()
    +preload()
}

class Zoom {
    scroll : ScrollPane
    sequences : Group
    labelsMap : Map<Integer, List<DefaultLabel>>
    mouseX : double
    mouseY : double

    +bindEffect()
    -setEvents()
    -getLabels(indexFrom : int, indexTo : int) : List<DefaultLabel>
    +applyAll(infoLabels : List<DefaultLabel>, left : double, right : double)
    +apply(label : DefaultLabel, mouseX : doube, mouseY : double)
    -addScale(label : DefaultLabel, ratio : double)

}

'FXML
class base << (F,orange) FXML >> {
    + sources : Text
    + bases : Text
    + occurrences : Text
}
class graph << (F,orange) FXML >> {
    + progressIndicator : ProgressIndicator
    + sequences : Group
    + scroll : ScrollPane
}
class main << (F,orange) FXML >> {
    + view : StackPane
    + overlay : StackPane
    + menu : MenuBar
    + main : BorderPane
}
class newick << (F,orange) FXML >> {
    + newick : Group
    + progressIndicator : ProgressIndicator
}
class footer << (F,orange) FXML >> {
    + message : Text
}
class welcome << (F,orange) FXML >> {
    + load : Button
}
class overlay << (F,orange) FXML >>

'Relations
BaseController "1" *-- "1" base
DefaultGraphController "1" *-- "1" graph
MainController "1" *-- "1" main
DefaultNewickController "1" *-- "1" newick
MessageController "1" *-- "1" footer
WelcomeController "1" *-- "1" welcome
OverlayController "1" *-- "1" overlay

App "1" *-- "1" MainController
MainController o-- MenuController
MainController o-- MessageController
MainController o-- OverlayController
MainController --> WelcomeController

DefaultNewickController ..> DrawableEdge
DefaultNewickController ..> NewickLabel

DefaultGraphController ..> InfoLabel
DefaultGraphController ..> DrawableEdge
DefaultGraphController ..> Zoom

LoadService ..> model.Parser

InfoLabel ..> BaseLabel
InfoLabel --> BaseController

NewickController --> GraphController

MainController ..> Workspace

WelcomeController --> NewickController

GraphController --> SelectNewickController
GraphController --> SubGraphController

Workspace ..> LoadService

'External classes
abstract class javafx.concurrent.Service<V> {
    -value : ReadOnlyObjectProperty<V>
    +createTask() : Task<V>
}

abstract class javafx.application.Application {
    +start(stage : Stage)
}

interface javafx.fxml.Initializable {
    +initialize(location : URL, resources : ResourceBundle)
}
@enduml
